# -*- coding: utf-8 -*-
"""cnn_project_vgg16FT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HC4H5R200vYh8cPWb2qHXpyr3acKBKKq
"""

import numpy as np
import matplotlib.pyplot as plt
import os
import cv2
import pandas as pd
from tqdm.notebook import tqdm
import tensorflow as tf

from google.colab import drive
drive.mount('/content/gdrive')

from keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout
from keras import layers, models, losses, utils

from keras.preprocessing import image

import os
c_list = os.listdir('./gdrive/My Drive/cropped/')

lol = image.ImageDataGenerator(validation_split = 0.2)

inp_shape = (154, 217, 3)
inp_lol = inp_shape[:-1]

train = lol.flow_from_directory(
    directory = './gdrive/My Drive/cropped/',
    target_size = inp_lol,
    color_mode = 'rgb',
    batch_size=32,
    class_mode="sparse",
    classes = c_list,
    subset = 'training'
)

test = lol.flow_from_directory(
    directory = './gdrive/My Drive/cropped/',
    target_size = inp_lol,
    color_mode = 'rgb',
    batch_size=32,
    class_mode="sparse",
    classes = c_list,
    subset = 'validation'
)

train.n, test.n

"""VGG16 Net"""

from keras.applications import VGG16

base_model = VGG16(weights = 'imagenet', include_top = False, input_tensor = layers.Input(shape = inp_shape))

ft_model = base_model.output
ft_model = layers.Flatten()(ft_model)
ft_model = layers.Dense(512)(ft_model)
ft_model = layers.Dropout(0.5)(ft_model)
# ft_model = layers.Dense(1024)(ft_model)
ft_model = layers.Dense(len(c_list))(ft_model)

model = models.Model(input = base_model.input, outputs = ft_model)

model.summary()

for layer in base_model.layers:
  layer.trainable = False

with tf.device('/device:GPU:0'):
  model.compile(optimizer = 'SGD',
                  loss = losses.SparseCategoricalCrossentropy(from_logits=True),
                  metrics = ['sparse_categorical_accuracy'])

  history = model.fit(train, epochs=30, validation_data = test)

plt.figure(figsize = (20, 5))

plt.subplot(121)
plt.plot(history.history['sparse_categorical_accuracy'], label = 'accuracy')
plt.plot(history.history['val_sparse_categorical_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
# plt.ylim([0.5, 1])
plt.legend(loc='lower right')

plt.subplot(122)
plt.plot(history.history['loss'], label = 'loss')
plt.plot(history.history['val_loss'], label = 'val_loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(loc='upper right')
plt.show()

